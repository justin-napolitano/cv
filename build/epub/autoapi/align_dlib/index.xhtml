<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta property="og:title" content="align_dlib" />
  <meta property="og:type" content="website" />
  <meta property="og:url" content="autoapi/align_dlib/index.xhtml" />
  <meta property="og:description" content="Module for dlib-based alignment. Module Contents: Classes: Attributes:" />
  
    <title>align_dlib</title>
    <link rel="stylesheet" type="text/css" href="../../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../../_static/epub.css" />
    <link rel="stylesheet" type="text/css" href="../../_static/togglebutton.css" />
    <link rel="stylesheet" type="text/css" href="../../_static/mystnb.css" />
    <link rel="stylesheet" type="text/css" href="../../_static/copybutton.css" />
    <link rel="stylesheet" type="text/css" href="../../_static/sphinx-thebe.css" />
    <link rel="stylesheet" type="text/css" href="../../_static/graphviz.css" />
    <link rel="stylesheet" type="text/css" href="../../_static/design-style.59c74d8c95b765a7fd995ac71d459ebe.min.css" />   
<link
  rel="alternate"
  type="application/atom+xml"
  href="../../sections/blog/posts/atom.xml"
  title="Blog"
/>
 
<style type="text/css">
  ul.ablog-archive {
    list-style: none;
    overflow: auto;
    margin-left: 0px;
  }
  ul.ablog-archive li {
    float: left;
    margin-right: 5px;
    font-size: 80%;
  }
  ul.postlist a {
    font-style: italic;
  }
  ul.postlist-style-disc {
    list-style-type: disc;
  }
  ul.postlist-style-none {
    list-style-type: none;
  }
  ul.postlist-style-circle {
    list-style-type: circle;
  }
</style>

  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
             <div class="section" id="module-align_dlib">
<span id="align-dlib"></span><h1><a class="reference internal" href="#module-align_dlib" title="align_dlib"><code class="xref py py-mod docutils literal notranslate"><span class="pre">align_dlib</span></code></a></h1>
<p>Module for dlib-based alignment.</p>
<div class="section" id="module-contents">
<h2>Module Contents</h2>
<div class="section" id="classes">
<h3>Classes</h3>
<table class="longtable docutils align-default">
<colgroup>
<col style="width: 10%">
<col style="width: 90%">
</colgroup>
<tbody>
<tr class="row-odd">
<td><p><a class="reference internal" href="#align_dlib.AlignDlib" title="align_dlib.AlignDlib"><code class="xref py py-obj docutils literal notranslate"><span class="pre">AlignDlib</span></code></a></p></td>
<td><p>Use <a class="reference external" href="http://blog.dlib.net/2014/08/real-time-face-pose-estimation.html">dlib's landmark estimation</a><span class="link-target"> [http://blog.dlib.net/2014/08/real-time-face-pose-estimation.html]</span> to align faces.</p></td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="attributes">
<h3>Attributes</h3>
<table class="longtable docutils align-default">
<colgroup>
<col style="width: 10%">
<col style="width: 90%">
</colgroup>
<tbody>
<tr class="row-odd">
<td><p><a class="reference internal" href="#align_dlib.TEMPLATE" title="align_dlib.TEMPLATE"><code class="xref py py-obj docutils literal notranslate"><span class="pre">TEMPLATE</span></code></a></p></td>
<td><p></p></td>
</tr>
<tr class="row-even">
<td><p><a class="reference internal" href="#align_dlib.INV_TEMPLATE" title="align_dlib.INV_TEMPLATE"><code class="xref py py-obj docutils literal notranslate"><span class="pre">INV_TEMPLATE</span></code></a></p></td>
<td><p></p></td>
</tr>
<tr class="row-odd">
<td><p><a class="reference internal" href="#align_dlib.MINMAX_TEMPLATE" title="align_dlib.MINMAX_TEMPLATE"><code class="xref py py-obj docutils literal notranslate"><span class="pre">MINMAX_TEMPLATE</span></code></a></p></td>
<td><p></p></td>
</tr>
</tbody>
</table>
<dl class="py data">
<dt class="sig sig-object py" id="align_dlib.TEMPLATE">
<span class="sig-prename descclassname"><span class="pre">align_dlib.</span></span><span class="sig-name descname"><span class="pre">TEMPLATE</span></span>
</dt>
<dd></dd>
</dl>

<dl class="py data">
<dt class="sig sig-object py" id="align_dlib.INV_TEMPLATE">
<span class="sig-prename descclassname"><span class="pre">align_dlib.</span></span><span class="sig-name descname"><span class="pre">INV_TEMPLATE</span></span>
</dt>
<dd></dd>
</dl>

<dl class="py data">
<dt class="sig sig-object py" id="align_dlib.MINMAX_TEMPLATE">
<span class="sig-prename descclassname"><span class="pre">align_dlib.</span></span><span class="sig-name descname"><span class="pre">MINMAX_TEMPLATE</span></span>
</dt>
<dd></dd>
</dl>

<dl class="py class">
<dt class="sig sig-object py" id="align_dlib.AlignDlib">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">align_dlib.</span></span><span class="sig-name descname"><span class="pre">AlignDlib</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">facePredictor</span></span></em><span class="sig-paren">)</span>
</dt>
<dd>
<p>Use <a class="reference external" href="http://blog.dlib.net/2014/08/real-time-face-pose-estimation.html">dlib’s landmark estimation</a><span class="link-target"> [http://blog.dlib.net/2014/08/real-time-face-pose-estimation.html]</span> to align faces.</p>
<p>The alignment preprocess faces for input into a neural network.
Faces are resized to the same size (such as 96x96) and transformed
to make landmarks (such as the eyes and nose) appear at the same
location on every image.</p>
<p>Normalized landmarks:</p>
<img alt="autoapi/images/dlib-landmark-mean.png" src="autoapi/images/dlib-landmark-mean.png">
<dl class="py attribute">
<dt class="sig sig-object py" id="align_dlib.AlignDlib.INNER_EYES_AND_BOTTOM_LIP">
<span class="sig-name descname"><span class="pre">INNER_EYES_AND_BOTTOM_LIP</span></span><em class="property"><span class="w"> </span><span class="pre">=</span> <span class="pre">[39,</span> <span class="pre">42,</span> <span class="pre">57]</span></em>
</dt>
<dd></dd>
</dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="align_dlib.AlignDlib.OUTER_EYES_AND_NOSE">
<span class="sig-name descname"><span class="pre">OUTER_EYES_AND_NOSE</span></span><em class="property"><span class="w"> </span><span class="pre">=</span> <span class="pre">[36,</span> <span class="pre">45,</span> <span class="pre">33]</span></em>
</dt>
<dd></dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="align_dlib.AlignDlib.getAllFaceBoundingBoxes">
<span class="sig-name descname"><span class="pre">getAllFaceBoundingBoxes</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">self</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rgbImg</span></span></em><span class="sig-paren">)</span>
</dt>
<dd>
<p>Find all face bounding boxes in an image.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd">
<p><strong>rgbImg</strong> (<em>numpy.ndarray</em>) – RGB image to process. Shape: (height, width, 3)</p>
</dd>
<dt class="field-even">Returns</dt>
<dd class="field-even">
<p>All face bounding boxes in an image.</p>
</dd>
<dt class="field-odd">Return type</dt>
<dd class="field-odd">
<p>dlib.rectangles</p>
</dd>
</dl>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="align_dlib.AlignDlib.getLargestFaceBoundingBox">
<span class="sig-name descname"><span class="pre">getLargestFaceBoundingBox</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">self</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rgbImg</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">skipMulti</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span>
</dt>
<dd>
<p>Find the largest face bounding box in an image.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd">
<ul class="simple">
<li><p><strong>rgbImg</strong> (<em>numpy.ndarray</em>) – RGB image to process. Shape: (height, width, 3)</p></li>
<li><p><strong>skipMulti</strong> (<em>bool</em>) – Skip image if more than one face detected.</p></li>
</ul>
</dd>
<dt class="field-even">Returns</dt>
<dd class="field-even">
<p>The largest face bounding box in an image, or None.</p>
</dd>
<dt class="field-odd">Return type</dt>
<dd class="field-odd">
<p>dlib.rectangle</p>
</dd>
</dl>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="align_dlib.AlignDlib.findLandmarks">
<span class="sig-name descname"><span class="pre">findLandmarks</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">self</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rgbImg</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">bb</span></span></em><span class="sig-paren">)</span>
</dt>
<dd>
<p>Find the landmarks of a face.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd">
<ul class="simple">
<li><p><strong>rgbImg</strong> (<em>numpy.ndarray</em>) – RGB image to process. Shape: (height, width, 3)</p></li>
<li><p><strong>bb</strong> (<em>dlib.rectangle</em>) – Bounding box around the face to find landmarks for.</p></li>
</ul>
</dd>
<dt class="field-even">Returns</dt>
<dd class="field-even">
<p>Detected landmark locations.</p>
</dd>
<dt class="field-odd">Return type</dt>
<dd class="field-odd">
<p>list of (x,y) tuples</p>
</dd>
</dl>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="align_dlib.AlignDlib.align">
<span class="sig-name descname"><span class="pre">align</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">self</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">imgDim</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rgbImg</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">bb</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">landmarks</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">landmarkIndices</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">INNER_EYES_AND_BOTTOM_LIP</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">skipMulti</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">scale</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">1.0</span></span></em><span class="sig-paren">)</span>
</dt>
<dd>
<p>align(imgDim, rgbImg, bb=None, landmarks=None, landmarkIndices=INNER_EYES_AND_BOTTOM_LIP)</p>
<p>Transform and align a face in an image.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd">
<ul class="simple">
<li><p><strong>imgDim</strong> (<em>int</em>) – The edge length in pixels of the square the image is resized to.</p></li>
<li><p><strong>rgbImg</strong> (<em>numpy.ndarray</em>) – RGB image to process. Shape: (height, width, 3)</p></li>
<li><p><strong>bb</strong> (<em>dlib.rectangle</em>) – Bounding box around the face to align. Defaults to the largest face.</p></li>
<li><p><strong>landmarks</strong> (<em>list of</em><em> (</em><em>x</em><em>,</em><em>y</em><em>) </em><em>tuples</em>) – Detected landmark locations. Landmarks found on <cite>bb</cite> if not provided.</p></li>
<li><p><strong>landmarkIndices</strong> (<em>list of ints</em>) – The indices to transform to.</p></li>
<li><p><strong>skipMulti</strong> (<em>bool</em>) – Skip image if more than one face detected.</p></li>
<li><p><strong>scale</strong> (<em>float</em>) – Scale image before cropping to the size given by imgDim.</p></li>
</ul>
</dd>
<dt class="field-even">Returns</dt>
<dd class="field-even">
<p>The aligned RGB image. Shape: (imgDim, imgDim, 3)</p>
</dd>
<dt class="field-odd">Return type</dt>
<dd class="field-odd">
<p>numpy.ndarray</p>
</dd>
</dl>
</dd>
</dl>

</dd>
</dl>

</div>
</div>
</div>

    
<script type="text/x-thebe-config">
    {
        requestKernel: true,
        binderOptions: {
            repo: "binder-examples/jupyter-stacks-datascience",
            ref: "master",
        },
        codeMirrorConfig: {
            theme: "abcdef",
            mode: "python"
        },
        kernelOptions: {
            kernelName: "python3",
            path: "./autoapi/align_dlib"
        },
        predefinedOutput: true
    }
    </script>
    
<script>kernelName = 'python3'</script>

<div class="section">
   
</div>

            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>