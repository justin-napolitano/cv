<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta property="og:title" content="Retail Sales Analysis Jupyter Notebook" />
  <meta property="og:type" content="website" />
  <meta property="og:url" content="projects/project-retail-sales-forecasting/SalesForcasting.xhtml" />
  
    <title>Retail Sales Analysis Jupyter Notebook</title>
    <link rel="stylesheet" type="text/css" href="../../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../../_static/epub.css" />
    <link rel="stylesheet" type="text/css" href="../../_static/togglebutton.css" />
    <link rel="stylesheet" type="text/css" href="../../_static/mystnb.css" />
    <link rel="stylesheet" type="text/css" href="../../_static/copybutton.css" />
    <link rel="stylesheet" type="text/css" href="../../_static/sphinx-thebe.css" />
    <link rel="stylesheet" type="text/css" href="../../_static/graphviz.css" />
    <link rel="stylesheet" type="text/css" href="../../_static/design-style.59c74d8c95b765a7fd995ac71d459ebe.min.css" />   
<link
  rel="alternate"
  type="application/atom+xml"
  href="../../sections/blog/posts/atom.xml"
  title="Blog"
/>
 
<style type="text/css">
  ul.ablog-archive {
    list-style: none;
    overflow: auto;
    margin-left: 0px;
  }
  ul.ablog-archive li {
    float: left;
    margin-right: 5px;
    font-size: 80%;
  }
  ul.postlist a {
    font-style: italic;
  }
  ul.postlist-style-disc {
    list-style-type: disc;
  }
  ul.postlist-style-none {
    list-style-type: none;
  }
  ul.postlist-style-circle {
    list-style-type: circle;
  }
</style>

  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
             <div class="tex2jax_ignore mathjax_ignore section" id="retail-sales-analysis-jupyter-notebook">
<h1>Retail Sales Analysis Jupyter Notebook</h1>
<div class="cell docutils container">
<div class="cell_input docutils container">
<div class="highlight-ipython3 notranslate">
<div class="highlight"><pre><span></span><span class="c1">#All Models in this program test the validity of the model at predicting actiual values.  </span>
<span class="c1"># I have not yet added prediction/forecasting functionality.  I will do one week's work of prediction at a time.  </span>


<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span> 
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span> 
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span> 
<span class="kn">import</span> <span class="nn">statsmodels.api</span> <span class="k">as</span> <span class="nn">sm</span>
<span class="kn">import</span> <span class="nn">operator</span>
<span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">mean_squared_error</span>
<span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">sqrt</span>
<span class="kn">from</span> <span class="nn">statsmodels.tsa.api</span> <span class="kn">import</span> <span class="n">ExponentialSmoothing</span><span class="p">,</span> <span class="n">SimpleExpSmoothing</span><span class="p">,</span> <span class="n">Holt</span>
</pre></div>
</div>
</div>
<div class="cell_output docutils container">
<div class="output stderr highlight-myst-ansi notranslate">
<div class="highlight"><pre><span></span>/home/jnapolitano/Dropbox/python/Projects/websites/jnapolitano.io/test/lib/python3.8/site-packages/statsmodels/compat/pandas.py:65: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.
  from pandas import Int64Index as NumericIndex
</pre></div>
</div>
</div>
</div>
<div class="cell docutils container">
<div class="cell_input docutils container">
<div class="highlight-ipython3 notranslate">
<div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">mape_vectorized_v2</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span> 
    <span class="n">mask</span> <span class="o">=</span> <span class="n">a</span> <span class="o">!=</span> <span class="mi">0</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">fabs</span><span class="p">(</span><span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="p">)</span><span class="o">/</span><span class="n">a</span><span class="p">)[</span><span class="n">mask</span><span class="p">]</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span> 
</pre></div>
</div>
</div>
</div>
<div class="cell docutils container">
<div class="cell_input docutils container">
<div class="highlight-ipython3 notranslate">
<div class="highlight"><pre><span></span><span class="c1">#Creating the initial Data Frame from the potLog6 csv.  Data from 1/1/2020 to 3/31/2020</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">'/home/jnapolitano/Dropbox/python/Projects/websites/jnapolitano.io/source/projects/project-retail-sales-forecasting/PotLog.csv'</span><span class="p">)</span>


<span class="c1">#creating the dictionary to hold the Errors of each method.  Will find minimum(best) value at the end</span>
<span class="n">rmseDictionary</span> <span class="o">=</span> <span class="p">{}</span>

<span class="n">mapeDictionary</span> <span class="o">=</span> <span class="p">{}</span>
</pre></div>
</div>
</div>
</div>
<div class="cell docutils container">
<div class="cell_input docutils container">
<div class="highlight-ipython3 notranslate">
<div class="highlight"><pre><span></span><span class="c1">#Rearanging data into two new data frames aggregated by the sums of days</span>
<span class="c1">#historic data contains the months of jan and february</span>
<span class="c1">#test data is the month of march</span>

<span class="n">allData</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
<span class="n">allData</span><span class="p">[</span><span class="s1">'Timestamp'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">date</span><span class="p">,</span><span class="nb">format</span><span class="o">=</span><span class="s1">'%Y-%m-</span><span class="si">%d</span><span class="s1">'</span><span class="p">)</span>
<span class="n">allData</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">allData</span><span class="o">.</span><span class="n">Timestamp</span>
<span class="n">allData</span> <span class="o">=</span> <span class="n">allData</span><span class="o">.</span><span class="n">resample</span><span class="p">(</span><span class="s1">'D'</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
<span class="n">allData</span> <span class="o">=</span> <span class="n">allData</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">'hour'</span><span class="p">,</span> <span class="s1">'week'</span><span class="p">])</span>

<span class="n">historic</span> <span class="o">=</span> <span class="n">df</span><span class="p">[:</span><span class="mi">720</span><span class="p">]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>

<span class="n">historic</span><span class="p">[</span><span class="s1">'Timestamp'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">historic</span><span class="o">.</span><span class="n">date</span><span class="p">,</span><span class="nb">format</span><span class="o">=</span><span class="s1">'%Y-%m-</span><span class="si">%d</span><span class="s1">'</span><span class="p">)</span>
<span class="n">historic</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">historic</span><span class="o">.</span><span class="n">Timestamp</span>
<span class="n">historic</span> <span class="o">=</span> <span class="n">historic</span><span class="o">.</span><span class="n">resample</span><span class="p">(</span><span class="s1">'D'</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
<span class="n">historic</span> <span class="o">=</span> <span class="n">historic</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">'hour'</span><span class="p">,</span> <span class="s1">'week'</span><span class="p">])</span>

<span class="n">test</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="mi">720</span><span class="p">:]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>

<span class="n">test</span><span class="p">[</span><span class="s1">'Timestamp'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">test</span><span class="o">.</span><span class="n">date</span><span class="p">,</span><span class="nb">format</span><span class="o">=</span><span class="s1">'%Y-%m-</span><span class="si">%d</span><span class="s1">'</span><span class="p">)</span>
<span class="n">test</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">test</span><span class="o">.</span><span class="n">Timestamp</span>
<span class="n">test</span> <span class="o">=</span> <span class="n">test</span><span class="o">.</span><span class="n">resample</span><span class="p">(</span><span class="s1">'D'</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
<span class="n">test</span> <span class="o">=</span> <span class="n">test</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">'hour'</span><span class="p">,</span> <span class="s1">'week'</span><span class="p">])</span>
</pre></div>
</div>
</div>
</div>
<div class="cell docutils container">
<div class="cell_input docutils container">
<div class="highlight-ipython3 notranslate">
<div class="highlight"><pre><span></span><span class="c1">#Plotting the Historic and Test data on the same plane</span>

<span class="n">historic</span><span class="o">.</span><span class="n">sales</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">8</span><span class="p">),</span> <span class="n">title</span><span class="o">=</span> <span class="s1">'Sales'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">14</span><span class="p">)</span>
<span class="n">test</span><span class="o">.</span><span class="n">sales</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">8</span><span class="p">),</span> <span class="n">title</span><span class="o">=</span> <span class="s1">'Sales'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">14</span><span class="p">)</span>

<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</pre></div>
</div>
</div>
<div class="cell_output docutils container">
<img alt="../../_images/SalesForcasting_5_0.png" src="../../_images/SalesForcasting_5_0.png">
</div>
</div>
<div class="cell docutils container">
<div class="cell_input docutils container">
<div class="highlight-ipython3 notranslate">
<div class="highlight"><pre><span></span><span class="n">dd</span><span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">)</span>
<span class="n">y_hat_avg</span> <span class="o">=</span> <span class="n">allData</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
<span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'naive'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span> 
<span class="c1">#print (y_hat_avg['sales'][3])</span>
<span class="c1">#print (len(y_hat_avg))</span>

<span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'naive'</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">i</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">y_hat_avg</span><span class="o">.</span><span class="n">iterrows</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">y_hat_avg</span><span class="p">):</span>
        <span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'naive'</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="c1">#print(index)</span>
        <span class="c1">#sale = row.sales</span>
        <span class="c1">#print(sale)</span>
        <span class="n">i</span> <span class="o">+=</span><span class="mi">1</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">break</span>


<span class="n">y_hat_avg</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="cell_output docutils container">
<div class="output text_html"><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>sales</th>
      <th>naive</th>
    </tr>
    <tr>
      <th>Timestamp</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2020-01-01</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2020-01-02</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2020-01-03</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2020-01-04</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2020-01-05</th>
      <td>8</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2020-01-06</th>
      <td>13</td>
      <td>8</td>
    </tr>
    <tr>
      <th>2020-01-07</th>
      <td>15</td>
      <td>13</td>
    </tr>
    <tr>
      <th>2020-01-08</th>
      <td>14</td>
      <td>15</td>
    </tr>
    <tr>
      <th>2020-01-09</th>
      <td>12</td>
      <td>14</td>
    </tr>
    <tr>
      <th>2020-01-10</th>
      <td>8</td>
      <td>12</td>
    </tr>
  </tbody>
</table>
</div></div>
</div>
</div>
<div class="cell docutils container">
<div class="cell_input docutils container">
<div class="highlight-ipython3 notranslate">
<div class="highlight"><pre><span></span><span class="c1"># The easy or naive forcasting method.  It predicts values according to the value of the previous day </span>
<span class="c1">#This needs to be redone.  It shuold not be a straight line but rather a scatter plot</span>

<span class="c1">#dd= np.asarray(allData.sales)</span>
<span class="c1">#y_hat_avg = test.copy()</span>
<span class="c1">#y_hat_avg['naive'] = dd[len(dd)-1]</span>
<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="mi">8</span><span class="p">))</span>
<span class="c1">#plt.plot(historic.index, historic['sales'], label='Historic Sales')</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">index</span><span class="p">,</span><span class="n">allData</span><span class="p">[</span><span class="s1">'sales'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s1">'Actual'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">y_hat_avg</span><span class="o">.</span><span class="n">index</span><span class="p">,</span><span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'naive'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s1">'Predicted'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="s1">'best'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s2">"Naive Forecast"</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
    
<span class="n">rmse</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">mean_squared_error</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">,</span> <span class="n">y_hat_avg</span><span class="o">.</span><span class="n">naive</span><span class="p">))</span>
<span class="n">rmseDictionary</span><span class="p">[</span><span class="s2">"Naive"</span><span class="p">]</span> <span class="o">=</span> <span class="n">rmse</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">"The RMS for the Naive Method is equal to </span><span class="si">{}</span><span class="s2">"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">rmse</span><span class="p">))</span>

<span class="n">mape</span> <span class="o">=</span> <span class="n">mape_vectorized_v2</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">,</span> <span class="n">y_hat_avg</span><span class="o">.</span><span class="n">naive</span><span class="p">)</span>
<span class="n">mapeDictionary</span><span class="p">[</span><span class="s1">'Naive'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mape</span> 

<span class="n">y_hat_avg</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="cell_output docutils container">
<img alt="../../_images/SalesForcasting_7_0.png" src="../../_images/SalesForcasting_7_0.png">
<div class="output stream highlight-myst-ansi notranslate">
<div class="highlight"><pre><span></span>The RMS for the Naive Method is equal to 4.650416500311948
</pre></div>
</div>
<div class="output text_html"><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>sales</th>
      <th>naive</th>
    </tr>
    <tr>
      <th>Timestamp</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2020-01-01</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2020-01-02</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2020-01-03</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2020-01-04</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2020-01-05</th>
      <td>8</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2020-01-06</th>
      <td>13</td>
      <td>8</td>
    </tr>
    <tr>
      <th>2020-01-07</th>
      <td>15</td>
      <td>13</td>
    </tr>
    <tr>
      <th>2020-01-08</th>
      <td>14</td>
      <td>15</td>
    </tr>
    <tr>
      <th>2020-01-09</th>
      <td>12</td>
      <td>14</td>
    </tr>
    <tr>
      <th>2020-01-10</th>
      <td>8</td>
      <td>12</td>
    </tr>
  </tbody>
</table>
</div></div>
</div>
</div>
<div class="cell docutils container">
<div class="cell_input docutils container">
<div class="highlight-ipython3 notranslate">
<div class="highlight"><pre><span></span><span class="c1">#The Simple Average forcasting method forcasts according the overall average of sales</span>

<span class="c1">#y_hat_avg = test.copy()</span>
<span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'avg_forecast'</span><span class="p">]</span> <span class="o">=</span> <span class="n">allData</span><span class="p">[</span><span class="s1">'sales'</span><span class="p">]</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>


<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="mi">8</span><span class="p">))</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">historic</span><span class="p">[</span><span class="s1">'sales'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s1">'Historic'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">test</span><span class="p">[</span><span class="s1">'sales'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s1">'Test'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'avg_forecast'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s1">'Average Forecast'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="s1">'best'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>

<span class="n">rmse</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">mean_squared_error</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">,</span> <span class="n">y_hat_avg</span><span class="o">.</span><span class="n">avg_forecast</span><span class="p">))</span>
<span class="n">rmseDictionary</span><span class="p">[</span><span class="s2">"Simple Average"</span><span class="p">]</span> <span class="o">=</span> <span class="n">rmse</span>

<span class="nb">print</span><span class="p">(</span><span class="s2">"The RMS for the Simple Average Method is equal to </span><span class="si">{}</span><span class="se">\n</span><span class="s2">"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">rmse</span><span class="p">))</span>

<span class="n">mape</span> <span class="o">=</span> <span class="n">mape_vectorized_v2</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">,</span> <span class="n">y_hat_avg</span><span class="o">.</span><span class="n">avg_forecast</span><span class="p">)</span>
<span class="n">mapeDictionary</span><span class="p">[</span><span class="s1">'Simple_Average'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mape</span> 

<span class="n">y_hat_avg</span><span class="o">.</span><span class="n">tail</span><span class="p">()</span>
</pre></div>
</div>
</div>
<div class="cell_output docutils container">
<img alt="../../_images/SalesForcasting_8_0.png" src="../../_images/SalesForcasting_8_0.png">
<div class="output stream highlight-myst-ansi notranslate">
<div class="highlight"><pre><span></span>The RMS for the Simple Average Method is equal to 3.864665029828413
</pre></div>
</div>
<div class="output text_html"><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>sales</th>
      <th>naive</th>
      <th>avg_forecast</th>
    </tr>
    <tr>
      <th>Timestamp</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2020-03-27</th>
      <td>11</td>
      <td>11</td>
      <td>9.857143</td>
    </tr>
    <tr>
      <th>2020-03-28</th>
      <td>10</td>
      <td>11</td>
      <td>9.857143</td>
    </tr>
    <tr>
      <th>2020-03-29</th>
      <td>9</td>
      <td>10</td>
      <td>9.857143</td>
    </tr>
    <tr>
      <th>2020-03-30</th>
      <td>7</td>
      <td>9</td>
      <td>9.857143</td>
    </tr>
    <tr>
      <th>2020-03-31</th>
      <td>15</td>
      <td>7</td>
      <td>9.857143</td>
    </tr>
  </tbody>
</table>
</div></div>
</div>
</div>
<div class="cell docutils container">
<div class="cell_input docutils container">
<div class="highlight-ipython3 notranslate">
<div class="highlight"><pre><span></span><span class="c1">#The moving average forcasting method forcasts according the average of a number of units.  In this case we use 7 days </span>
<span class="c1">#or one week.  More testing should be done to discover the best number of days to use for average</span>
<span class="c1">#This should also shift by values.  Will revisit this </span>

<span class="c1">#y_hat_avg = test.copy()</span>
<span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'moving_avg_forecast'</span><span class="p">]</span> <span class="o">=</span> <span class="n">allData</span><span class="p">[</span><span class="s1">'sales'</span><span class="p">]</span><span class="o">.</span><span class="n">rolling</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>
<span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'moving_avg_forecast'</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">allData</span><span class="p">[</span><span class="s1">'sales'</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
<span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'moving_avg_forecast'</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">allData</span><span class="p">[</span><span class="s1">'sales'</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
<span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'moving_avg_forecast'</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">allData</span><span class="p">[</span><span class="s1">'sales'</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>

<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">8</span><span class="p">))</span>
<span class="c1">#plt.plot(historic['sales'], label='Historic')</span>
<span class="c1">#plt.plot(test['sales'], label='Test')</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">allData</span><span class="p">[</span><span class="s1">'sales'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s1">'Actual Sales'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'moving_avg_forecast'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s1">'Moving Average Forecast'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="s1">'best'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
    
<span class="n">rmse</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">mean_squared_error</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">,</span> <span class="n">y_hat_avg</span><span class="o">.</span><span class="n">moving_avg_forecast</span><span class="p">))</span>
<span class="n">rmseDictionary</span><span class="p">[</span><span class="s2">"Moving Average"</span><span class="p">]</span> <span class="o">=</span> <span class="n">rmse</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">"The RMSE for the Moving Average Method is equal to </span><span class="si">{}</span><span class="se">\n</span><span class="s2">"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">rmse</span><span class="p">))</span>

<span class="n">mape</span> <span class="o">=</span> <span class="n">mape_vectorized_v2</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">,</span> <span class="n">y_hat_avg</span><span class="o">.</span><span class="n">moving_avg_forecast</span><span class="p">)</span>
<span class="n">mapeDictionary</span><span class="p">[</span><span class="s1">'Moving Average'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mape</span> 

<span class="n">y_hat_avg</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>
</div>
</div>
<div class="cell_output docutils container">
<div class="output stderr highlight-myst-ansi notranslate">
<div class="highlight"><pre><span></span>/tmp/ipykernel_96701/4124950064.py:7: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  y_hat_avg['moving_avg_forecast'][0] = allData['sales'][0].copy()
/tmp/ipykernel_96701/4124950064.py:8: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  y_hat_avg['moving_avg_forecast'][1] = allData['sales'][1].copy()
/tmp/ipykernel_96701/4124950064.py:9: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  y_hat_avg['moving_avg_forecast'][2] = allData['sales'][2].copy()
</pre></div>
</div>
<img alt="../../_images/SalesForcasting_9_1.png" src="../../_images/SalesForcasting_9_1.png">
<div class="output stream highlight-myst-ansi notranslate">
<div class="highlight"><pre><span></span>The RMSE for the Moving Average Method is equal to 2.850786580399194
</pre></div>
</div>
<div class="output text_html"><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>sales</th>
      <th>naive</th>
      <th>avg_forecast</th>
      <th>moving_avg_forecast</th>
    </tr>
    <tr>
      <th>Timestamp</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2020-01-01</th>
      <td>1</td>
      <td>1</td>
      <td>9.857143</td>
      <td>1.000000</td>
    </tr>
    <tr>
      <th>2020-01-02</th>
      <td>1</td>
      <td>1</td>
      <td>9.857143</td>
      <td>1.000000</td>
    </tr>
    <tr>
      <th>2020-01-03</th>
      <td>1</td>
      <td>1</td>
      <td>9.857143</td>
      <td>1.000000</td>
    </tr>
    <tr>
      <th>2020-01-04</th>
      <td>1</td>
      <td>1</td>
      <td>9.857143</td>
      <td>1.000000</td>
    </tr>
    <tr>
      <th>2020-01-05</th>
      <td>8</td>
      <td>1</td>
      <td>9.857143</td>
      <td>3.333333</td>
    </tr>
  </tbody>
</table>
</div></div>
</div>
</div>
<div class="cell docutils container">
<div class="cell_input docutils container">
<div class="highlight-ipython3 notranslate">
<div class="highlight"><pre><span></span><span class="n">model</span> <span class="o">=</span> <span class="n">SimpleExpSmoothing</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">allData</span><span class="p">[</span><span class="s1">'sales'</span><span class="p">]))</span>
<span class="n">fit1</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">()</span>
<span class="n">fit2</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">smoothing_level</span><span class="o">=</span><span class="mf">0.2</span><span class="p">)</span>
<span class="n">fit3</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">smoothing_level</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">fit4</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">optimized</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>


<span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Simple_Exponential_Smoothing_alpha=.3'</span><span class="p">]</span> <span class="o">=</span> <span class="n">fit1</span><span class="o">.</span><span class="n">fittedvalues</span>
<span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Simple_Exponential_Smoothing_alpha=.2'</span><span class="p">]</span> <span class="o">=</span> <span class="n">fit2</span><span class="o">.</span><span class="n">fittedvalues</span>
<span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Simple_Exponential_Smoothing_alpha=.5'</span><span class="p">]</span> <span class="o">=</span> <span class="n">fit3</span><span class="o">.</span><span class="n">fittedvalues</span>
<span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Simple_Exponential_Smoothing_alpha_Optimum'</span><span class="p">]</span> <span class="o">=</span> <span class="n">fit4</span><span class="o">.</span><span class="n">fittedvalues</span>

<span class="n">y_hat_avg</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
<span class="c1">#print(fit1.fittedvalues)</span>
</pre></div>
</div>
</div>
<div class="cell_output docutils container">
<div class="output text_html"><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>sales</th>
      <th>naive</th>
      <th>avg_forecast</th>
      <th>moving_avg_forecast</th>
      <th>Simple_Exponential_Smoothing_alpha=.3</th>
      <th>Simple_Exponential_Smoothing_alpha=.2</th>
      <th>Simple_Exponential_Smoothing_alpha=.5</th>
      <th>Simple_Exponential_Smoothing_alpha_Optimum</th>
    </tr>
    <tr>
      <th>Timestamp</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2020-01-01</th>
      <td>1</td>
      <td>1</td>
      <td>9.857143</td>
      <td>1.000000</td>
      <td>9.857143</td>
      <td>4.959090</td>
      <td>1.599929</td>
      <td>9.857143</td>
    </tr>
    <tr>
      <th>2020-01-02</th>
      <td>1</td>
      <td>1</td>
      <td>9.857143</td>
      <td>1.000000</td>
      <td>9.857143</td>
      <td>4.167272</td>
      <td>1.299964</td>
      <td>9.857143</td>
    </tr>
    <tr>
      <th>2020-01-03</th>
      <td>1</td>
      <td>1</td>
      <td>9.857143</td>
      <td>1.000000</td>
      <td>9.857143</td>
      <td>3.533817</td>
      <td>1.149982</td>
      <td>9.857143</td>
    </tr>
    <tr>
      <th>2020-01-04</th>
      <td>1</td>
      <td>1</td>
      <td>9.857143</td>
      <td>1.000000</td>
      <td>9.857143</td>
      <td>3.027054</td>
      <td>1.074991</td>
      <td>9.857143</td>
    </tr>
    <tr>
      <th>2020-01-05</th>
      <td>8</td>
      <td>1</td>
      <td>9.857143</td>
      <td>3.333333</td>
      <td>9.857142</td>
      <td>2.621643</td>
      <td>1.037496</td>
      <td>9.857142</td>
    </tr>
  </tbody>
</table>
</div></div>
</div>
</div>
<div class="cell docutils container">
<div class="cell_input docutils container">
<div class="highlight-ipython3 notranslate">
<div class="highlight"><pre><span></span><span class="c1">#The Exponential Smoothing Forcasting  I know that i've implemented it correctly, but i do not understand how it works </span>
<span class="c1"># in python.  Need to study </span>

<span class="c1">#y_hat_avg = test.copy()</span>
<span class="c1">#y_hat_avg['SES'] = fit2.forecast(len(test))</span>
<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">8</span><span class="p">))</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">allData</span><span class="p">[</span><span class="s1">'sales'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s1">'Actual Sales'</span><span class="p">)</span>
<span class="c1">#plt.plot(test['sales'], label='Test')</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Simple_Exponential_Smoothing_alpha=.3'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s1">'SES.3'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Simple_Exponential_Smoothing_alpha=.2'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s1">'SES.2'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Simple_Exponential_Smoothing_alpha=.5'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s1">'SES.5'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Simple_Exponential_Smoothing_alpha_Optimum'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s1">'SES_Optimum'</span><span class="p">)</span>

<span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="s1">'best'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
    
<span class="n">rmse</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">mean_squared_error</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">,</span> <span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Simple_Exponential_Smoothing_alpha=.3'</span><span class="p">]))</span>
<span class="n">rmseDictionary</span><span class="p">[</span><span class="s2">"Exponential_Smoothing.3"</span><span class="p">]</span> <span class="o">=</span> <span class="n">rmse</span>

<span class="n">rmse</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">mean_squared_error</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">,</span> <span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Simple_Exponential_Smoothing_alpha=.2'</span><span class="p">]))</span>
<span class="n">rmseDictionary</span><span class="p">[</span><span class="s2">"Exponential_Smoothing.2"</span><span class="p">]</span> <span class="o">=</span> <span class="n">rmse</span>

<span class="n">rmse</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">mean_squared_error</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">,</span> <span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Simple_Exponential_Smoothing_alpha=.5'</span><span class="p">]))</span>
<span class="n">rmseDictionary</span><span class="p">[</span><span class="s2">"Exponential_Smoothing.5"</span><span class="p">]</span> <span class="o">=</span> <span class="n">rmse</span>

<span class="n">rmse</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">mean_squared_error</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">,</span> <span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Simple_Exponential_Smoothing_alpha_Optimum'</span><span class="p">]))</span>
<span class="n">rmseDictionary</span><span class="p">[</span><span class="s2">"Exponential_Smoothing_Optimum"</span><span class="p">]</span> <span class="o">=</span> <span class="n">rmse</span>


<span class="n">mape</span> <span class="o">=</span> <span class="n">mape_vectorized_v2</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">,</span> <span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Simple_Exponential_Smoothing_alpha=.3'</span><span class="p">])</span>
<span class="n">mapeDictionary</span><span class="p">[</span><span class="s1">'Simple_Exponential_Smoothing.3'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mape</span> 

<span class="n">mape</span> <span class="o">=</span> <span class="n">mape_vectorized_v2</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">,</span> <span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Simple_Exponential_Smoothing_alpha=.2'</span><span class="p">])</span>
<span class="n">mapeDictionary</span><span class="p">[</span><span class="s1">'Simple_Exponential_Smoothing.2'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mape</span> 

<span class="n">mape</span> <span class="o">=</span> <span class="n">mape_vectorized_v2</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">,</span> <span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Simple_Exponential_Smoothing_alpha=.5'</span><span class="p">])</span>
<span class="n">mapeDictionary</span><span class="p">[</span><span class="s1">'Simple_Exponential_Smoothing.5'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mape</span> 

<span class="n">mape</span> <span class="o">=</span> <span class="n">mape_vectorized_v2</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">,</span> <span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Simple_Exponential_Smoothing_alpha_Optimum'</span><span class="p">])</span>
<span class="n">mapeDictionary</span><span class="p">[</span><span class="s1">'Simple_Exponential_Smoothing_Optimum'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mape</span> 


<span class="c1">#y_hat_avg.head()</span>
</pre></div>
</div>
</div>
<div class="cell_output docutils container">
<img alt="../../_images/SalesForcasting_11_0.png" src="../../_images/SalesForcasting_11_0.png">
</div>
</div>
<div class="cell docutils container">
<div class="cell_input docutils container">
<div class="highlight-ipython3 notranslate">
<div class="highlight"><pre><span></span><span class="c1">#Tests Data for trends, seasonality, etc to preprocess for Holt Winter</span>

<span class="n">sm</span><span class="o">.</span><span class="n">tsa</span><span class="o">.</span><span class="n">seasonal_decompose</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">)</span><span class="o">.</span><span class="n">plot</span><span class="p">()</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">tsa</span><span class="o">.</span><span class="n">stattools</span><span class="o">.</span><span class="n">adfuller</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</pre></div>
</div>
</div>
<div class="cell_output docutils container">
<img alt="../../_images/SalesForcasting_12_0.png" src="../../_images/SalesForcasting_12_0.png">
</div>
</div>
<div class="cell docutils container">
<div class="cell_input docutils container">
<div class="highlight-ipython3 notranslate">
<div class="highlight"><pre><span></span><span class="c1">#The Holt Winter method forcasts according to trend, season, and means.  The data under consideration does not have a</span>
<span class="c1">#trend.  </span>


<span class="c1">#y_hat_avg = test.copy()</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">ExponentialSmoothing</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">allData</span><span class="p">[</span><span class="s1">'sales'</span><span class="p">])</span> <span class="p">,</span><span class="n">seasonal_periods</span><span class="o">=</span><span class="mi">7</span> <span class="p">,</span><span class="n">trend</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">seasonal</span><span class="o">=</span><span class="s1">'add'</span><span class="p">)</span>
<span class="n">fit1</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">optimized</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
<span class="n">fit2</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">smoothing_level</span><span class="o">=</span><span class="mf">.5</span><span class="p">,</span> <span class="n">smoothing_slope</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">smoothing_seasonal</span><span class="o">=</span><span class="mf">.5</span><span class="p">)</span>
<span class="n">fit3</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">smoothing_level</span><span class="o">=</span><span class="mf">.3</span><span class="p">,</span> <span class="n">smoothing_slope</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">smoothing_seasonal</span><span class="o">=</span><span class="mf">.3</span><span class="p">)</span>


<span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Holt_Winter_Optimum'</span><span class="p">]</span> <span class="o">=</span> <span class="n">fit1</span><span class="o">.</span><span class="n">forecast</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">allData</span><span class="p">))</span>
<span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Holt_Winter_.5'</span><span class="p">]</span> <span class="o">=</span> <span class="n">fit2</span><span class="o">.</span><span class="n">forecast</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">allData</span><span class="p">))</span>
<span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Holt_Winter_.3'</span><span class="p">]</span> <span class="o">=</span> <span class="n">fit3</span><span class="o">.</span><span class="n">forecast</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">allData</span><span class="p">))</span>

<span class="c1">#y_hat_avg['Holt_Winter'] = fit1.forecast(len(test))</span>

<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">8</span><span class="p">))</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">allData</span><span class="p">[</span><span class="s1">'sales'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s1">'Actual Sales'</span><span class="p">)</span>

<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Holt_Winter_Optimum'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s1">'Holt Winter Optimized'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Holt_Winter_.5'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s1">'Holt Winter .5'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Holt_Winter_.3'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s1">'Holt Winter .3'</span><span class="p">)</span>
          
<span class="c1">#plt.plot( historic['sales'], label='Historic')</span>
<span class="c1">#plt.plot(test['sales'], label='Test')</span>
<span class="c1">#plt.plot(y_hat_avg['Holt_Winter'], label='Holt_Winter')</span>
<span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="s1">'best'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
   
    
    
<span class="n">rmse</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">mean_squared_error</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">,</span> <span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Holt_Winter_Optimum'</span><span class="p">]))</span>
<span class="n">rmseDictionary</span><span class="p">[</span><span class="s2">"Holt_Winter_Optimum"</span><span class="p">]</span> <span class="o">=</span> <span class="n">rmse</span>

<span class="n">rmse</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">mean_squared_error</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">,</span> <span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Holt_Winter_.5'</span><span class="p">]))</span>
<span class="n">rmseDictionary</span><span class="p">[</span><span class="s2">"Holt_Winter_.5"</span><span class="p">]</span> <span class="o">=</span> <span class="n">rmse</span>

<span class="n">rmse</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">mean_squared_error</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">,</span> <span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Holt_Winter_.3'</span><span class="p">]))</span>
<span class="n">rmseDictionary</span><span class="p">[</span><span class="s2">"Holt_Winter_.3"</span><span class="p">]</span> <span class="o">=</span> <span class="n">rmse</span>
    
<span class="c1">#rmse = sqrt(mean_squared_error(test.sales, y_hat_avg.Holt_Winter))</span>

<span class="c1">#rmseDictionary["Holt Winter"] = rmse</span>

<span class="c1">#print("The RMSE for the Holt Winter Model is equal to {}\n".format(rmse))</span>

<span class="n">mape</span> <span class="o">=</span> <span class="n">mape_vectorized_v2</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">,</span> <span class="n">y_hat_avg</span><span class="o">.</span><span class="n">Holt_Winter_Optimum</span><span class="p">)</span>
<span class="n">mapeDictionary</span><span class="p">[</span><span class="s1">'Holt_Winter_Optimum'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mape</span> 

<span class="n">mape</span> <span class="o">=</span> <span class="n">mape_vectorized_v2</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">,</span> <span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Holt_Winter_.5'</span><span class="p">])</span>
<span class="n">mapeDictionary</span><span class="p">[</span><span class="s1">'Holt_Winter_.5'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mape</span> 

<span class="n">mape</span> <span class="o">=</span> <span class="n">mape_vectorized_v2</span><span class="p">(</span><span class="n">allData</span><span class="o">.</span><span class="n">sales</span><span class="p">,</span> <span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'Holt_Winter_.3'</span><span class="p">])</span>
<span class="n">mapeDictionary</span><span class="p">[</span><span class="s1">'Holt_Winter_.3'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mape</span> 

<span class="n">y_hat_avg</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>
</div>
</div>
<div class="cell_output docutils container">
<img alt="../../_images/SalesForcasting_13_0.png" src="../../_images/SalesForcasting_13_0.png">
<div class="output text_html"><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>sales</th>
      <th>naive</th>
      <th>avg_forecast</th>
      <th>moving_avg_forecast</th>
      <th>Simple_Exponential_Smoothing_alpha=.3</th>
      <th>Simple_Exponential_Smoothing_alpha=.2</th>
      <th>Simple_Exponential_Smoothing_alpha=.5</th>
      <th>Simple_Exponential_Smoothing_alpha_Optimum</th>
      <th>Holt_Winter_Optimum</th>
      <th>Holt_Winter_.5</th>
      <th>Holt_Winter_.3</th>
    </tr>
    <tr>
      <th>Timestamp</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2020-01-01</th>
      <td>1</td>
      <td>1</td>
      <td>9.857143</td>
      <td>1.000000</td>
      <td>9.857143</td>
      <td>4.959090</td>
      <td>1.599929</td>
      <td>9.857143</td>
      <td>10.932666</td>
      <td>13.501084</td>
      <td>12.522079</td>
    </tr>
    <tr>
      <th>2020-01-02</th>
      <td>1</td>
      <td>1</td>
      <td>9.857143</td>
      <td>1.000000</td>
      <td>9.857143</td>
      <td>4.167272</td>
      <td>1.299964</td>
      <td>9.857143</td>
      <td>11.810095</td>
      <td>11.318897</td>
      <td>11.941726</td>
    </tr>
    <tr>
      <th>2020-01-03</th>
      <td>1</td>
      <td>1</td>
      <td>9.857143</td>
      <td>1.000000</td>
      <td>9.857143</td>
      <td>3.533817</td>
      <td>1.149982</td>
      <td>9.857143</td>
      <td>11.073389</td>
      <td>11.110567</td>
      <td>11.554229</td>
    </tr>
    <tr>
      <th>2020-01-04</th>
      <td>1</td>
      <td>1</td>
      <td>9.857143</td>
      <td>1.000000</td>
      <td>9.857143</td>
      <td>3.027054</td>
      <td>1.074991</td>
      <td>9.857143</td>
      <td>9.335734</td>
      <td>10.898330</td>
      <td>10.552254</td>
    </tr>
    <tr>
      <th>2020-01-05</th>
      <td>8</td>
      <td>1</td>
      <td>9.857143</td>
      <td>3.333333</td>
      <td>9.857142</td>
      <td>2.621643</td>
      <td>1.037496</td>
      <td>9.857142</td>
      <td>8.212906</td>
      <td>10.680159</td>
      <td>9.817994</td>
    </tr>
  </tbody>
</table>
</div></div>
</div>
</div>
<div class="cell docutils container">
<div class="cell_input docutils container">
<div class="highlight-ipython3 notranslate">
<div class="highlight"><pre><span></span><span class="c1">#the Sarina Model is another seasonal model. I don't know how it works exactly.  I need to review the math and the</span>
<span class="c1">#documentation.  I am getting a convergence error.  Will fix immediatly</span>

<span class="n">y_hat_avg</span> <span class="o">=</span> <span class="n">test</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
<span class="n">fit1</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">tsa</span><span class="o">.</span><span class="n">statespace</span><span class="o">.</span><span class="n">SARIMAX</span><span class="p">(</span><span class="n">historic</span><span class="o">.</span><span class="n">sales</span><span class="p">,</span> <span class="n">order</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span><span class="n">seasonal_order</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">7</span><span class="p">))</span><span class="o">.</span><span class="n">fit</span><span class="p">()</span>
<span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'SARIMA'</span><span class="p">]</span> <span class="o">=</span> <span class="n">fit1</span><span class="o">.</span><span class="n">forecast</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">test</span><span class="o">.</span><span class="n">sales</span><span class="p">),</span> <span class="n">dynamic</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">8</span><span class="p">))</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span> <span class="n">historic</span><span class="p">[</span><span class="s1">'sales'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s1">'Historic'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">test</span><span class="p">[</span><span class="s1">'sales'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s1">'Test'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'SARIMA'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s1">'SARIMA'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="s1">'best'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
    
<span class="n">rmse</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">mean_squared_error</span><span class="p">(</span><span class="n">test</span><span class="o">.</span><span class="n">sales</span><span class="p">,</span> <span class="n">y_hat_avg</span><span class="o">.</span><span class="n">SARIMA</span><span class="p">))</span>
<span class="n">rmseDictionary</span><span class="p">[</span><span class="s2">"SARIMA"</span><span class="p">]</span> <span class="o">=</span> <span class="n">rmse</span>

<span class="n">mape</span> <span class="o">=</span> <span class="n">mape_vectorized_v2</span><span class="p">(</span><span class="n">test</span><span class="o">.</span><span class="n">sales</span><span class="p">,</span> <span class="n">y_hat_avg</span><span class="p">[</span><span class="s1">'SARIMA'</span><span class="p">])</span>
<span class="n">mapeDictionary</span><span class="p">[</span><span class="s1">'SARIMA'</span><span class="p">]</span> <span class="o">=</span> <span class="n">mape</span> 

<span class="c1">#print("The RMSE for the SARIMA Model is equal to {}\n".format(rmse))</span>
   
</pre></div>
</div>
</div>
<div class="cell_output docutils container">
<div class="output stderr highlight-myst-ansi notranslate">
<div class="highlight"><pre><span></span> This problem is unconstrained.
</pre></div>
</div>
<div class="output stream highlight-myst-ansi notranslate">
<div class="highlight"><pre><span></span>RUNNING THE L-BFGS-B CODE

           * * *

Machine precision = 2.220D-16
 N =            8     M =           10

At X0         0 variables are exactly at the bounds

At iterate    0    f=  2.66232D+00    |proj g|=  6.54170D-02

At iterate    5    f=  2.58627D+00    |proj g|=  2.26162D-02

At iterate   10    f=  2.57546D+00    |proj g|=  7.34123D-03
</pre></div>
</div>
<div class="output stream highlight-myst-ansi notranslate">
<div class="highlight"><pre><span></span>At iterate   15    f=  2.56850D+00    |proj g|=  4.46988D-02

At iterate   20    f=  2.56359D+00    |proj g|=  5.62649D-03

At iterate   25    f=  2.56039D+00    |proj g|=  6.67412D-02
</pre></div>
</div>
<div class="output stream highlight-myst-ansi notranslate">
<div class="highlight"><pre><span></span>At iterate   30    f=  2.55761D+00    |proj g|=  3.08187D-03

At iterate   35    f=  2.55698D+00    |proj g|=  1.34257D-02
</pre></div>
</div>
<div class="output stream highlight-myst-ansi notranslate">
<div class="highlight"><pre><span></span>At iterate   40    f=  2.55574D+00    |proj g|=  9.72859D-03

At iterate   45    f=  2.55562D+00    |proj g|=  2.75953D-03
</pre></div>
</div>
<div class="output stream highlight-myst-ansi notranslate">
<div class="highlight"><pre><span></span>At iterate   50    f=  2.55559D+00    |proj g|=  1.56106D-03

           * * *

Tit   = total number of iterations
Tnf   = total number of function evaluations
Tnint = total number of segments explored during Cauchy searches
Skip  = number of BFGS updates skipped
Nact  = number of active bounds at final generalized Cauchy point
Projg = norm of the final projected gradient
F     = final function value

           * * *

   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F
    8     50     61      1     0     0   1.561D-03   2.556D+00
  F =   2.5555930249702210     

STOP: TOTAL NO. of ITERATIONS REACHED LIMIT                 
</pre></div>
</div>
<div class="output stderr highlight-myst-ansi notranslate">
<div class="highlight"><pre><span></span>/home/jnapolitano/Dropbox/python/Projects/websites/jnapolitano.io/test/lib/python3.8/site-packages/statsmodels/base/model.py:604: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals
  warnings.warn("Maximum Likelihood optimization failed to "
</pre></div>
</div>
<img alt="../../_images/SalesForcasting_14_7.png" src="../../_images/SalesForcasting_14_7.png">
</div>
</div>
<div class="cell docutils container">
<div class="cell_input docutils container">
<div class="highlight-ipython3 notranslate">
<div class="highlight"><pre><span></span><span class="nb">print</span><span class="p">(</span><span class="n">rmseDictionary</span><span class="p">)</span>

<span class="n">mn</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">rmseDictionary</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="n">operator</span><span class="o">.</span><span class="n">itemgetter</span><span class="p">(</span><span class="mi">1</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">"The Best Model is </span><span class="si">{}</span><span class="s2">"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">mn</span><span class="p">))</span>
</pre></div>
</div>
</div>
<div class="cell_output docutils container">
<div class="output stream highlight-myst-ansi notranslate">
<div class="highlight"><pre><span></span>{'Naive': 4.650416500311948, 'Simple Average': 3.864665029828413, 'Moving Average': 2.850786580399194, 'Exponential_Smoothing.3': 3.864665058622391, 'Exponential_Smoothing.2': 3.8907287216857633, 'Exponential_Smoothing.5': 4.038706174884183, 'Exponential_Smoothing_Optimum': 3.864665058622391, 'Holt_Winter_Optimum': 3.7255251931824076, 'Holt_Winter_.5': 4.193341923450785, 'Holt_Winter_.3': 4.007981277418963, 'SARIMA': 3.056354714728084}
The Best Model is Moving Average
</pre></div>
</div>
</div>
</div>
<div class="cell docutils container">
<div class="cell_input docutils container">
<div class="highlight-ipython3 notranslate">
<div class="highlight"><pre><span></span><span class="nb">print</span> <span class="p">(</span><span class="n">mapeDictionary</span><span class="p">)</span>

<span class="n">mn</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">mapeDictionary</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="n">operator</span><span class="o">.</span><span class="n">itemgetter</span><span class="p">(</span><span class="mi">1</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">"The Best Model is </span><span class="si">{}</span><span class="s2">"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">mn</span><span class="p">))</span>
</pre></div>
</div>
</div>
<div class="cell_output docutils container">
<div class="output stream highlight-myst-ansi notranslate">
<div class="highlight"><pre><span></span>{'Naive': 0.4248514297237633, 'Simple_Average': 0.7014871459995663, 'Moving Average': 0.2589423226705062, 'Simple_Exponential_Smoothing.3': 0.7014871310910847, 'Simple_Exponential_Smoothing.2': 0.4765668392710252, 'Simple_Exponential_Smoothing.5': 0.39056704728123787, 'Simple_Exponential_Smoothing_Optimum': 0.7014871310910847, 'Holt_Winter_Optimum': 0.7394861676289067, 'Holt_Winter_.5': 0.840375675006429, 'Holt_Winter_.3': 0.8120170834920649, 'SARIMA': 0.26343012680844485}
The Best Model is Moving Average
</pre></div>
</div>
</div>
</div>
</div>

    
<script type="text/x-thebe-config">
    {
        requestKernel: true,
        binderOptions: {
            repo: "binder-examples/jupyter-stacks-datascience",
            ref: "master",
        },
        codeMirrorConfig: {
            theme: "abcdef",
            mode: "python"
        },
        kernelOptions: {
            kernelName: "python3",
            path: "./projects/project-retail-sales-forecasting"
        },
        predefinedOutput: true
    }
    </script>
    
<script>kernelName = 'python3'</script>

<div class="section">
   
</div>

            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>